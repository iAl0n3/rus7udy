fn main() {
    /* 所有权：
        所有权是 Rust 最独特的特性，它让 Rust 无需 GC 就可以保证内存安全

        Rust 的核心就是所有权
        所有程序在运行时都必须管理它们使用计算机内存的方式
            - 有一些语言有垃圾收集机制，在程序运行时，它们会不断寻找不在使用的内存
            - 在其他语言中，程序员必须显式地分配和释放内存
        Rust 使用了第三种方式：
            - 内存是通过一个所有权系统来管理的，其中包含一组编译器在编译时检查的规则
            - 当程序运行时，所有权特性不会减慢程序的运行速度
    */
    /*  Stack & Heap：
                在像Rust这样的系统级编程语言中，一个值是在 stack 还是 heap 上对语言的行为和你为什么要做某些决定是有重大影响的

            Stack 按值的接收顺序来存储，按相反的顺序将它们移除（后进先出，LIFO）
                - 添加数据叫压入栈
                - 移除数据叫弹出栈
            所有存储在 Stack 上的数据必须拥有已知的固定的大小
                - 编译时大小未知的数据或运行时大小可能发生变化的数据必须放在 Heap 上
            Heap 的内存组织性差一些
                - 当你把数据放入 heap 时，你会请求一定数量的空间
                - 操作系统在 heap 里找到一块足够大的空间，把它标记为在用，并返回一个指针，也就是这个空间的地址
                - 这个过程叫做在 heap 上进行内存分配，有时也仅仅称为“分配”
    */
    /* 存储数据：
                把值压到 stack 上不叫分配
                因为指针是已知固定大小的，可以把指针存放在 stack 上
                    - 但如果想要实际数据，你必须使用指针来定位
                把数据压到 Stack 上比要在 Heap 上分配快的多
                    - 因为操作系统不需要寻找用来存储新数据的空间，那个位置永远在 Stack 的顶端
                在 Heap 上分配内存要做更多的工作：
                    - 操作系统首先需要找到一个足够大的空间来存放数据，然后做好记录方便下次分配
    */

    /* 访问数据：
        访问 Heap 中的数据要比访问 Stack 中的数据慢，因为需要通过指针才能找到 Heap 中的数据
            - 对于现代的处理器来说，由于缓存的缘故，如果指令在内存中跳转的次数越少，那么速度就越快
        + 如果数据存放的距离比较近，那么处理器的处理速度就会更快一些（Stack 上）
        + 如果数据存放的距离比较远，那么处理速度就会慢一些（Heap 上）
            - 在 Heap 上分配大量的空间也是需要时间的
    */

    /* 函数调用：
            当你的代码调用函数时，值被传入到函数（也包括指向 Heap 的指针）。函数本地的变量被压到 Stack 上。当函数结束后，这些值会从 Stack 上弹出
    */

    /* 所有权存在的原因：
            所有权解决的问题：
                - 跟踪代码的哪些部分正在使用 Heap 的哪些数据
                - 最小化 heap 上的重复数据量
                - 清理 heap 上未使用的数据以避免空间不足
            一旦你懂得了所有权，那么就不需要经常去想 stack 或 heap 了
            管理 Heap 数据是所有权存在的原因，这有助于解释它为什么会这样工作
     */
}

