fn main() {
/* 变量：
    声明变量使用 let 关键字
    默认情况下，变量是不可变的
    声明变量时，使用 mut 使变量可变
 */
    let mut x = 5;
    println!("The value is {}", x);
    x = 6;
    println!("The value is {}", x);

/* 变量和常量：
    常量在绑定值后也是不可变的，但是它与不可变的变量有很多区别：
        - 不可以使用 mut ，常量永远是不可变的
        - 声明常量使用 const 关键字，它的类型必须被标注
        - 常量可以在任何作用域内进行声明，包括全局作用域
        - 常量只可以绑定到常量表达式，无法绑定到函数的调用结果或只能在运行时才能计算出的值
    程序运行期间，常量在其声明的作用域内一直有效
    命名规范：Rust 里常量使用大写字母，每个单词之间使用下划线分开，例如：MAX_POINTS
    例子：const MAX_POINTS:u32 = 100_000;
 */
    const MAX_POINTS:u32 = 100_000;

/* shadowing(隐藏)：
    可以使用相同的名字命名新的变量，新的变量就会 shadow 之前声明的同名变量
        - 在后续代码中这个变量名代表的就是新的变量

    shadow 和把变量标记为 mut 是不一样的
        - 如果不使用 let 关键字，那么重新给非 mut 的变量赋值会导致编译时报错
        - 而使用 let 声明的同名新变量，也是不可变的
        - 使用 let 声明的同名新变量，它的类型可以与之前不同
 */
    let spaces = "          ";
    let spaces = spaces.len();
    
    println!("{}", spaces);
}